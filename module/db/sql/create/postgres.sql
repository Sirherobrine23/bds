-- User
CREATE TABLE IF NOT EXISTS "user" (
  id BIGSERIAL PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  "name" TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "password" (
  "user_id" BIGINT UNIQUE NOT NULL REFERENCES public.user(id) ON DELETE CASCADE,
  update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "password" TEXT NOT NULL,
  PRIMARY KEY ("user_id")
);
CREATE TABLE IF NOT EXISTS "cookie" (
  id BIGSERIAL PRIMARY KEY,
  "user_id" BIGINT REFERENCES public.user(id) ON DELETE CASCADE,
  cookie TEXT NOT NULL,
  create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "token" (
  id BIGSERIAL PRIMARY KEY,
  "user_id" BIGINT REFERENCES public.user(id) ON DELETE CASCADE,
  token TEXT NOT NULL,
  "permissions" JSON NOT NULL,
  create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Server
CREATE TABLE IF NOT EXISTS "server" (
  id BIGSERIAL PRIMARY KEY,
  "owner_id" BIGINT REFERENCES public.user(id) ON DELETE CASCADE,
  "name" TEXT NOT NULL,
  software VARCHAR(128) NOT NULL,
  "version" TEXT NOT NULL,
  create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "friends" (
  id BIGSERIAL PRIMARY KEY,
  server_id BIGINT REFERENCES server (id) ON DELETE CASCADE,
  "user_id" BIGINT REFERENCES public.user(id) ON DELETE CASCADE,
  "permissions" JSON NOT NULL,
  CONSTRAINT uq_friends_server_user UNIQUE (server_id, "user_id")
);
CREATE TABLE IF NOT EXISTS "backups" (
  id BIGSERIAL PRIMARY KEY,
  server_id BIGINT REFERENCES server (id) ON DELETE CASCADE,
  uuid TEXT NOT NULL,
  software VARCHAR(128) NOT NULL,
  "version" TEXT NOT NULL,
  create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS "runner" (
  id BIGSERIAL PRIMARY KEY,
  is_global BOOLEAN NOT NULL,
  is_local BOOLEAN NOT NULL,
  "user_id" BIGINT REFERENCES public.user(id) ON DELETE CASCADE
);